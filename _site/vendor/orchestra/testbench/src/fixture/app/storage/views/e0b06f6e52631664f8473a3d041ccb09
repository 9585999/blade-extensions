

<?php
        \Radic\BladeExtensions\Directives\ForeachLoopFactory::newLoop($array);
        foreach($array as  $item):
        $loop = \Radic\BladeExtensions\Directives\ForeachLoopFactory::loop();
        ?>
	<?php $testClassInstance->assertTrue($loop->first); ?>
	<?php
        break;
        ?>
	<?php $testClassInstance->assertFalse(true, 'Break should exit the loop'); ?>
<?php
        \Radic\BladeExtensions\Directives\ForeachLoopFactory::looped();
        endforeach;
        \Radic\BladeExtensions\Directives\ForeachLoopFactory::endLoop($loop);
        ?>

<?php
        \Radic\BladeExtensions\Directives\ForeachLoopFactory::newLoop($array);
        foreach($array as  $key => $val):
        $loop = \Radic\BladeExtensions\Directives\ForeachLoopFactory::loop();
        ?>
	<?php $testClassInstance->assertTrue($loop->first); ?>
	<?php
        break;
        ?>
<?php
        \Radic\BladeExtensions\Directives\ForeachLoopFactory::looped();
        endforeach;
        \Radic\BladeExtensions\Directives\ForeachLoopFactory::endLoop($loop);
        ?>

<?php
        \Radic\BladeExtensions\Directives\ForeachLoopFactory::newLoop($getArray());
        foreach($getArray() as  $key):
        $loop = \Radic\BladeExtensions\Directives\ForeachLoopFactory::loop();
        ?>
	<?php $testClassInstance->assertTrue($loop->first); ?>
	<?php
        break;
        ?>
<?php
        \Radic\BladeExtensions\Directives\ForeachLoopFactory::looped();
        endforeach;
        \Radic\BladeExtensions\Directives\ForeachLoopFactory::endLoop($loop);
        ?>


<?php
        \Radic\BladeExtensions\Directives\ForeachLoopFactory::newLoop(array_merge($array, $getArray()));
        foreach(array_merge($array, $getArray()) as  $key):
        $loop = \Radic\BladeExtensions\Directives\ForeachLoopFactory::loop();
        ?>
	<?php $testClassInstance->assertTrue($loop->first); ?>
	<?php
        break;
        ?>
<?php
        \Radic\BladeExtensions\Directives\ForeachLoopFactory::looped();
        endforeach;
        \Radic\BladeExtensions\Directives\ForeachLoopFactory::endLoop($loop);
        ?>

<?php
        \Radic\BladeExtensions\Directives\ForeachLoopFactory::newLoop($getArray(true));
        foreach($getArray(true) as  $key => $val):
        $loop = \Radic\BladeExtensions\Directives\ForeachLoopFactory::loop();
        ?>
	<?php $testClassInstance->assertTrue($loop->first); ?>
	<?php
        break;
        ?>
<?php
        \Radic\BladeExtensions\Directives\ForeachLoopFactory::looped();
        endforeach;
        \Radic\BladeExtensions\Directives\ForeachLoopFactory::endLoop($loop);
        ?>

<?php
        \Radic\BladeExtensions\Directives\ForeachLoopFactory::newLoop($dataClass->array);
        foreach($dataClass->array as  $key => $val):
        $loop = \Radic\BladeExtensions\Directives\ForeachLoopFactory::loop();
        ?>
	<?php $testClassInstance->assertTrue($loop->first); ?>
	<?php
        break;
        ?>
<?php
        \Radic\BladeExtensions\Directives\ForeachLoopFactory::looped();
        endforeach;
        \Radic\BladeExtensions\Directives\ForeachLoopFactory::endLoop($loop);
        ?>

<?php
        \Radic\BladeExtensions\Directives\ForeachLoopFactory::newLoop($dataClass->getArray());
        foreach($dataClass->getArray() as  $key => $val):
        $loop = \Radic\BladeExtensions\Directives\ForeachLoopFactory::loop();
        ?>
	<?php $testClassInstance->assertTrue($loop->first); ?>
	<?php
        break;
        ?>
<?php
        \Radic\BladeExtensions\Directives\ForeachLoopFactory::looped();
        endforeach;
        \Radic\BladeExtensions\Directives\ForeachLoopFactory::endLoop($loop);
        ?>

<?php
        \Radic\BladeExtensions\Directives\ForeachLoopFactory::newLoop($dataClass->getArray(true));
        foreach($dataClass->getArray(true) as  $key => $val):
        $loop = \Radic\BladeExtensions\Directives\ForeachLoopFactory::loop();
        ?>
	<?php $testClassInstance->assertTrue($loop->first); ?>
	<?php
        break;
        ?>
<?php
        \Radic\BladeExtensions\Directives\ForeachLoopFactory::looped();
        endforeach;
        \Radic\BladeExtensions\Directives\ForeachLoopFactory::endLoop($loop);
        ?>


<?php
        \Radic\BladeExtensions\Directives\ForeachLoopFactory::newLoop($dataClass->getArray(true));
        foreach($dataClass->getArray(true) as  $key => $val):
        $loop = \Radic\BladeExtensions\Directives\ForeachLoopFactory::loop();
        ?>
	<?php $testClassInstance->assertTrue($loop->first); ?>
	<?php
        break;
        ?>

	<?php
        \Radic\BladeExtensions\Directives\ForeachLoopFactory::newLoop($dataClass->getArray());
        foreach($dataClass->getArray() as  $key2 => $val2):
        $loop = \Radic\BladeExtensions\Directives\ForeachLoopFactory::loop();
        ?>
		<?php $testClassInstance->assertTrue(is_int($loop->index)); ?>

	<?php
        \Radic\BladeExtensions\Directives\ForeachLoopFactory::looped();
        endforeach;
        \Radic\BladeExtensions\Directives\ForeachLoopFactory::endLoop($loop);
        ?>
<?php
        \Radic\BladeExtensions\Directives\ForeachLoopFactory::looped();
        endforeach;
        \Radic\BladeExtensions\Directives\ForeachLoopFactory::endLoop($loop);
        ?>



<?php $testArray = $dataClass->getArray(); ?>
<?php $total = count($testArray); ?>

<?php
        \Radic\BladeExtensions\Directives\ForeachLoopFactory::newLoop($dataClass->getArray());
        foreach($dataClass->getArray() as  $key => $val):
        $loop = \Radic\BladeExtensions\Directives\ForeachLoopFactory::loop();
        ?>

	<?php $testClassInstance->assertTrue($loop instanceof \Radic\BladeExtensions\Core\LoopItemInterface, '$loop should be an instance of LoopItemInterface'); ?>
	<?php $testClassInstance->assertTrue($loop->index == $key, 'index'); ?>
	<?php $testClassInstance->assertTrue($loop->index1 == $key + 1, '1 based index'); ?>
	<?php $testClassInstance->assertTrue($loop->revindex == ($total - 1) - $key, 'revindex'); ?>
	<?php $testClassInstance->assertTrue($loop->revindex1 == $total - $key, '1 based revindex'); ?>

	<?php if($key == 0): ?>
		<?php $testClassInstance->assertTrue($loop->length == $total, 'total'); ?>

		<?php $testClassInstance->assertTrue($loop->first, 'first should be true'); ?>
		<?php $testClassInstance->assertNotTrue($loop->last, 'last should be false'); ?>

		<?php $testClassInstance->assertTrue($loop->even, 'even should be true'); ?>
		<?php $testClassInstance->assertNotTrue($loop->odd, 'odd should be false'); ?>
	<?php elseif($key == 1): ?>
		<?php $testClassInstance->assertTrue($loop->odd, 'odd should be true'); ?>
		<?php $testClassInstance->assertNotTrue($loop->even, 'even should be false'); ?>

		<?php $testClassInstance->assertNotTrue($loop->first, 'first should be false'); ?>
		<?php $testClassInstance->assertNotTrue($loop->last, 'last should be false'); ?>
	<?php elseif($key == $total - 1): ?>
		<?php $testClassInstance->assertTrue($loop->last, 'last should be true'); ?>
		<?php $testClassInstance->assertNotTrue($loop->first, 'last should be false'); ?>
	<?php else: ?>
		<?php $testClassInstance->assertNotTrue($loop->first, 'first should be false'); ?>
		<?php $testClassInstance->assertNotTrue($loop->last, 'last should be false'); ?>
	<?php endif; ?>

<?php
        \Radic\BladeExtensions\Directives\ForeachLoopFactory::looped();
        endforeach;
        \Radic\BladeExtensions\Directives\ForeachLoopFactory::endLoop($loop);
        ?>

<?php $testClassInstance->assertNull($loop, 'End of loop stack should be null but is not null'); ?>


